version: '3.8'

services:

  api-gateway:
    image: api-gateway
    ports:
      #internal/external
      - "8181:8181"
    build:
      context: api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway-gbc
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - discovery-service
    networks:
      - spring


  discovery-service:
    image: discovery-service
    ports:
      #internal/external
      - "8761:8761"
    build:
      context: discovery-service
      dockerfile: Dockerfile
    container_name: discovery-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - spring



  inventory-service:
    image: inventory-service
    ports:
      #internal/external
      - "8083:8083"
    #builds the image if changes
    build:
      context: inventory-service
      dockerfile: ./Dockerfile
    container_name: inventory-service-gbc
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - postgres-inventory
      - discovery-service
    networks:
      - spring

  order-service:
    image: order-service
    ports:
    #internal/external
    - "8082:8082"

    #builds the image if changes
    build:
      context: order-service
      dockerfile: ./Dockerfile
    container_name: order-service-gbc
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - postgres-order
      - discovery-service
    networks:
      - spring

  product-services:
    image: product-services
    ports:
    #internal/external
    - "8084:8084"

    #builds the image if changes
    build:
      context: product-services
      dockerfile: ./Dockerfile
    container_name: product-services-gbc
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - mongodb
      - discovery-service
    networks:
      - spring


  mongodb:
    image: mongo:latest
    ports:
      #internal/external
      - "27017:27017"

    container_name: mongodb-gbc # same name as application-docker.properties
    environment:
      - MONGO_INITDB_ROOT_USERNAME=rootadmin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - ./data/mongo/products:/data/db
      - ./init/mongo/docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    restart: unless-stopped
    command: mongod --auth
    networks:
      - spring


  postgres-order:
    image: postgres:latest
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=order-service
    container_name: postgres-order-gbc
    volumes:
      - ./data/postgres/order-service:/data/postgres
      - ./init/postgres/order-service/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - spring


  postgres-inventory:
    image: postgres:latest
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=inventory-service
    container_name: postgres-inventory-gbc
    volumes:
      - ./data/postgres/inventory-service:/data/postgres
      - ./init/postgres/inventory-service/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - spring

  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "8888:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=taikai@domain.ca
      - PGADMIN_DEFAULT_PASSWORD=password
    container_name: pgadmin-order-gbc
    restart: unless-stopped
    depends_on:
      - postgres-order
    networks:
      - spring

  mongo-express:
    image: mongo-express
    ports:
          - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=rootadmin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb-gbc
    container_name: mongo-express-gbc
    restart: unless-stopped
    depends_on:
      - mongodb
    networks:
      - spring

networks:
  spring:
      driver: bridge